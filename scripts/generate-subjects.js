#!/usr/bin/env node
const fs = require('fs');
const path = require('path');

const rootDir = path.resolve(__dirname, '../เว็บคณิตสถิติ');
const manifestPath = path.join(rootDir, 'manifest.json');
const outputPath = path.join(rootDir, 'subjects.js');

const manifest = JSON.parse(fs.readFileSync(manifestPath, 'utf8'));

const cleanObject = (obj) => {
  if (!obj) return undefined;
  const result = {};
  for (const [key, value] of Object.entries(obj)) {
    if (value === undefined || value === null) continue;
    if (Array.isArray(value) && value.length === 0) continue;
    result[key] = value;
  }
  return Object.keys(result).length ? result : undefined;
};

const lessons = manifest.lessons.map(entry => {
  const card = entry.card || {};
  const metaSource = card.meta || {};
  const meta = cleanObject({
    version: metaSource.version || entry.version,
    updated_at: metaSource.updated_at || entry.updated_at,
    read_time: metaSource.read_time,
    depends_on: metaSource.depends_on
  });
  const lesson = {
    id: entry.id,
    title: entry.title,
    desc: card.desc || '',
    tags: card.tags || '',
    chip: card.chip || '',
    link: entry.assets?.page || '',
    summary: entry.assets?.summary || ''
  };
  if (meta) lesson.meta = meta;
  return lesson;
});

const formulas = manifest.formulas.map(entry => ({
  id: entry.id,
  title: entry.title,
  desc: entry.card?.desc || '',
  tags: entry.card?.tags || '',
  chip: entry.card?.chip || '',
  link: entry.assets?.page || ''
}));

const supplementEntries = (manifest.supplements || [])
  .filter(entry => entry.id !== 'summary-lesson11-22-compilation')
  .map(entry => {
  const card = entry.card || {};
  const meta = cleanObject({
    version: card.meta?.version || entry.version,
    updated_at: card.meta?.updated_at || entry.updated_at,
    read_time: card.meta?.read_time
  });
  const idFromLink = (card.link || '').replace(/\.html$/, '');
  const derivedId = entry.id === 'summaries-all'
    ? 'all'
    : idFromLink.startsWith('summary-')
      ? `${idFromLink.replace(/^summary-/, '')}-summary`
      : entry.id;
  const summary = {
    id: derivedId,
    title: card.title || entry.title,
    desc: card.desc || '',
    tags: card.tags || '',
    chip: card.chip || '',
    link: card.link || entry.assets?.page || ''
  };
  if (meta) summary.meta = meta;
  return summary;
}).filter(entry => entry.link);

const summariesFromLessons = lessons.map(lesson => {
  const chip = lesson.title.split(':')[0].replace('บทที่', 'บท').trim();
  return {
    id: `${lesson.id}-summary`,
    title: `สรุป 1 หน้า — ${lesson.title}`,
    desc: lesson.desc,
    tags: `สรุป ${lesson.tags}`.trim(),
    chip,
    link: lesson.summary
  };
});

const summaries = [...supplementEntries, ...summariesFromLessons];

const quizzes = manifest.quizzes.map(entry => ({
  id: entry.id,
  title: entry.title || `Quiz ${entry.id}`,
  desc: entry.card?.desc || '',
  tags: entry.card?.tags || '',
  chip: entry.card?.chip || '',
  link: entry.assets?.page || `quiz-${entry.id}.html`,
  lesson: entry.assets?.lesson || '',
  summary: entry.assets?.summary || '',
  config: entry.config
}));

const banner = `// subjects.js\n// Auto-generated by scripts/generate-subjects.js on ${new Date().toISOString()}\n`;

const serialize = (name, value) => `export const ${name} = ${JSON.stringify(value, null, 2)};\n`;

const output = [
  banner,
  serialize('lessons', lessons),
  '\n',
  serialize('formulas', formulas),
  '\n',
  serialize('summaries', summaries),
  '\n',
  serialize('quizzes', quizzes)
].join('');

fs.writeFileSync(outputPath, output, 'utf8');
console.log(`subjects.js generated with ${lessons.length} lessons, ${formulas.length} formulas, ${summaries.length} summaries, ${quizzes.length} quizzes.`);
